# Generated by Django 5.2.4 on 2025-07-25 13:23

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discogs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('master_id', models.IntegerField(blank=True, null=True)),
                ('title', models.CharField(max_length=500)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('genres', models.JSONField(blank=True, default=list)),
                ('styles', models.JSONField(blank=True, default=list)),
                ('formats', models.JSONField(blank=True, default=list)),
                ('average_rating', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('rating_count', models.IntegerField(default=0)),
                ('have_count', models.IntegerField(default=0)),
                ('want_count', models.IntegerField(default=0)),
                ('discogs_url', models.URLField(blank=True, null=True)),
                ('resource_url', models.URLField(blank=True, null=True)),
                ('thumb', models.URLField(blank=True, null=True)),
                ('cover_image', models.URLField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('data_quality', models.CharField(blank=True, max_length=50, null=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-date_added'],
            },
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discogs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('real_name', models.CharField(blank=True, max_length=255, null=True)),
                ('profile', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discogs_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('catalog_number', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AlbumFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('personal_notes', models.TextField(blank=True, null=True)),
                ('personal_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='albums.album')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_added'],
                'unique_together': {('user', 'album')},
            },
        ),
        migrations.AddField(
            model_name='album',
            name='favorite_users',
            field=models.ManyToManyField(related_name='favorite_albums', through='albums.AlbumFavorite', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AlbumArtist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('artist', 'Main Artist'), ('featuring', 'Featuring'), ('remix', 'Remix'), ('producer', 'Producer'), ('composer', 'Composer')], default='artist', max_length=20)),
                ('order', models.PositiveIntegerField(default=1)),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='albums.album')),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='albums.artist')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('album', 'artist', 'role')},
            },
        ),
        migrations.AddField(
            model_name='album',
            name='artists',
            field=models.ManyToManyField(through='albums.AlbumArtist', to='albums.artist'),
        ),
        migrations.CreateModel(
            name='AlbumLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('catalog_number', models.CharField(blank=True, max_length=100, null=True)),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='albums.album')),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='albums.label')),
            ],
            options={
                'unique_together': {('album', 'label')},
            },
        ),
        migrations.AddField(
            model_name='album',
            name='labels',
            field=models.ManyToManyField(through='albums.AlbumLabel', to='albums.label'),
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search_term', models.CharField(max_length=255)),
                ('search_date', models.DateTimeField(auto_now_add=True)),
                ('album_found', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='albums.album')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-search_date'],
            },
        ),
        migrations.CreateModel(
            name='Tracklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=10)),
                ('title', models.CharField(max_length=500)),
                ('duration', models.CharField(blank=True, max_length=10, null=True)),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracklist', to='albums.album')),
                ('artists', models.ManyToManyField(blank=True, to='albums.artist')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.AddIndex(
            model_name='album',
            index=models.Index(fields=['discogs_id'], name='albums_albu_discogs_0d03fe_idx'),
        ),
        migrations.AddIndex(
            model_name='album',
            index=models.Index(fields=['title'], name='albums_albu_title_6c7416_idx'),
        ),
        migrations.AddIndex(
            model_name='album',
            index=models.Index(fields=['year'], name='albums_albu_year_419342_idx'),
        ),
        migrations.AddIndex(
            model_name='album',
            index=models.Index(fields=['average_rating'], name='albums_albu_average_60ca7c_idx'),
        ),
    ]
